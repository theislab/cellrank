[flake8]
per-file-ignores =
    */__init__.py: F401, D104
    examples/*: D400, D205, D100
    docs/source/index.rst: D000
max_line_length = 120
filename = *.py
# D202 No blank lines allowed after function docstring
# D107 Missing docstring in __init__
# B008 Do not perform function calls in argument defaults.
# W503 line break before binary operator
# D105 Missing docstring in magic method
# E203 whitespace before ':'
# F405 ... may be undefined, or defined from star imports: ...
# RST306 Unknown target name
ignore = D202,D107,B008,W503,D105,E203,F405,RST306
exclude =
    .git,
    __pycache__,
    docs/*,
    tests/*,
    setup.py
ban-relative-imports = true
rst-roles =
    mod
    class
    meth
    func
    attr
    paramref
    ref
rst-directives =
    envvar
    exception

[doc8]
max-line-length = 120
ignore-path = .tox,docs/source/api,cellrank.egg-info,dist,build
# D000: D000 Unknown target name:
ignore-path-errors = docs/source/index.rst;D000,docs/source/latest_additions.rst;D000,docs/source/release_notes.rst;D000
quiet = 1

[pytest]
python_files = test_*.py
testpaths = tests/
xfail_strict = true
addopts = --ignore _ground_truth_figures --ignore _ground_truth_adatas -n auto -vv

[coverage:run]
branch = true
parallel = true
source = cellrank
omit = */__init__.py

[coverage:paths]
source =
    cellrank
    */site-packages/cellrank

[coverage:report]
exclude_lines =
    \#.*pragma:\s*no.?cover

    ^if __name__ == .__main__.:$

    ^\s*raise AssertionError\b
    ^\s*raise NotImplementedError\b
    ^\s*return NotImplemented\b
show_missing = true
precision = 2
skip_empty = True
sort = Miss

[gh-actions]
python =
    3.7: py37
    3.8: py38
    3.9: py39

[gh-actions:env]
PLATFORM =
    ubuntu-latest: linux
    macos-latest: macos

[tox]
isolated_build = True
envlist =
    covclean
    lint
    py{37,38,39}-{linux,macos}
    docs
skip_missing_interpreters = true

[testenv]
platform =
    linux: linux
    macos: (osx|darwin)
deps =
    linux: rpy2>=3.3.0
extras =
    test
    krylov
    external
passenv = TOXENV CI CODECOV_* GITHUB_ACTIONS PYTEST_FLAGS
usedevelop = true
commands =
    pytest --cov --cov-append --cov-report=term-missing --cov-config={toxinidir}/tox.ini --ignore docs/ {posargs:-vv} {env:PYTEST_FLAGS:}

[testenv:covclean]
description = Clean coverage files.
deps = coverage
skip_install = True
commands = coverage erase

[testenv:coverage]
description = Report the coverage difference.
deps =
    coverage
    diff_cover
skip_install = true
depends = py{37,38,39}-{linux,macos}
parallel_show_output = True
commands =
    coverage report --omit="tox/*"
    coverage xml --omit="tox/*" -o {toxinidir}/coverage.xml
    diff-cover --compare-branch origin/master {toxinidir}/coverage.xml

[testenv:lint]
description = Perform linting.
basepython = python3.8
deps = pre-commit>=2.9.3
skip_install = true
commands = pre-commit run --all-files --show-diff-on-failure {posargs:}

[testenv:clean-docs]
description = Clean the documentation artifacts.
basepython = python3.8
deps =
skip_install = true
changedir = {toxinidir}/docs
whitelist_externals = make
commands = make clean

[testenv:docs]
description = Build the documentation.
basepython = python3.8
skip_install = true
deps = -r{toxinidir}/docs/requirements.txt
whitelist_externals = sphinx-build
commands =
    sphinx-build --color -b html {toxinidir}/docs/source {toxinidir}/docs/build/html
    python -c 'import pathlib; print(f"Documentation is available under:", pathlib.Path(f"{toxinidir}") / "docs" / "build" / "html" / "index.html")'

[testenv:shallow-docs]
description = Build the documentation without running the examples.
basepython = python3.8
skip_install = true
deps = -r{toxinidir}/docs/requirements.txt
whitelist_externals = sphinx-build
commands =
    sphinx-build --color -D plot_gallery=0 -b html {toxinidir}/docs/source {toxinidir}/docs/build/html
    python -c 'import pathlib; print(f"Documentation is available under:", pathlib.Path(f"{toxinidir}") / "docs" / "build" / "html" / "index.html")'
