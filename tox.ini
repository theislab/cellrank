[flake8]
per-file-ignores =
    */*.py: F401,D104,D100
    examples/*: D400,D205,D100
    docs/source/index.rst: D000
    cellrank/_utils/_key.py: D101,D102,D106
max_line_length = 120
filename = *.py
# D202 No blank lines allowed after function docstring
# D107 Missing docstring in __init__
# B008 Do not perform function calls in argument defaults
# W503 line break before binary operator
# D105 Missing docstring in magic method
# E203 whitespace before ':'
# F405 ... may be undefined, or defined from star imports: ...
# RST306 Unknown target name
# D106 Missing docstring in public nested class
# B020 Found for loop that reassigns the iterable it is iterating with each iterable value
# B024: https://github.com/PyCQA/flake8-bugbear/issues/278
ignore = D202,D107,B008,W503,D105,E203,F405,RST306,B020,B024
exclude =
    .git,
    __pycache__,
    docs/*,
    tests/*,
    setup.py
ban-relative-imports = true
rst-roles =
    mod
    class
    meth
    func
    attr
    ref
rst-directives =
    envvar
    exception

[doc8]
max-line-length = 120
ignore-path = .tox,docs/source/api,cellrank.egg-info,dist,build,docs/source/release/**
# D000: D000 Unknown target name:
ignore-path-errors = docs/source/index.rst;D000,docs/source/latest_additions.rst;D000,docs/source/release_notes.rst;D000
quiet = 1

[pytest]
python_files = test_*.py
testpaths = tests/
xfail_strict = true
addopts = --ignore _ground_truth_figures --ignore _ground_truth_adatas -n auto -vv

[coverage:run]
branch = true
parallel = true
source = cellrank
omit =
    tests/*
    */__init__.py

[coverage:paths]
source =
    cellrank
    */site-packages/cellrank

[coverage:report]
exclude_lines =
    \#.*pragma:\s*no.?cover

    ^if __name__ == .__main__.:$

    ^\s*raise AssertionError\b
    ^\s*raise NotImplementedError\b
    ^\s*return NotImplemented\b
ignore_errors = True
show_missing = True
precision = 2
skip_empty = True
sort = Miss

[gh-actions]
python =
    3.8: py38
    3.9: py39
    3.10: py310

[gh-actions:env]
PLATFORM =
    ubuntu-latest: linux
    macos-latest: macos
USE_SLEPC =
    true: slepc
    false: noslepc

[tox]
isolated_build = True
envlist =
    covclean
    lint
    py{38,39,310}-{linux,macos}-{slepc,noslepc}
    coverage
    docs
skip_missing_interpreters = true

[testenv]
platform =
    linux: linux
    macos: (osx|darwin)
deps =
    adjustText
    linux: rpy2>=3.3.0
    linux: git+https://github.com/broadinstitute/wot@master
    # https://github.com/theislab/cellrank/pull/850
    slepc: numpy==1.21.0
    # we manually install PETSc/SLEPc on the CI from source
    slepc: mpi4py>=3.0.3
    slepc: petsc==3.15.4
    slepc: petsc4py==3.15.1
    slepc: slepc==3.15.2
    slepc: slepc4py==3.15.1
extras =
    test
    py38: external
passenv = TOXENV CI CODECOV_* GITHUB_ACTIONS PYTEST_FLAGS PETSC_* SLEPC_*
usedevelop = true
commands =
    python -m pytest --cov --cov-append --cov-report=term-missing --cov-config={toxinidir}/tox.ini --ignore docs/ {posargs:-vv} {env:PYTEST_FLAGS:}

[testenv:covclean]
description = Clean coverage files.
deps = coverage
skip_install = True
commands = coverage erase

[testenv:coverage]
description = Report the coverage difference.
deps =
    coverage
    diff_cover
skip_install = true
depends = py{38,39,310}-{linux,macos}-{slepc,noslepc}
parallel_show_output = True
commands =
    coverage report --omit="tox/*"
    coverage xml --omit="tox/*" -o {toxinidir}/coverage.xml
    diff-cover --compare-branch origin/master {toxinidir}/coverage.xml

[testenv:lint]
description = Perform linting.
basepython = python3.9
deps = pre-commit>=2.9.3
skip_install = true
commands = pre-commit run --all-files --show-diff-on-failure {posargs:}

[testenv:clean-docs]
description = Clean the documentation artifacts.
basepython = python3.9
deps =
skip_install = true
changedir = {toxinidir}/docs
whitelist_externals = make
commands = make clean

[testenv:check-docs]
description = Check whether the links in the documentation are valid.
basepython = python3.9
extras =
    docs
allowlist_externals = sphinx-build
commands =
    sphinx-build -W --keep-going -b spelling {toxinidir}/docs/source {toxinidir}/docs/build/spellcheck
    sphinx-build -q -W --keep-going -b linkcheck {toxinidir}/docs/source {toxinidir}/docs/build/linkcheck

[testenv:docs]
description = Build the documentation.
basepython = python3.9
deps = -r{toxinidir}/docs/requirements.txt
whitelist_externals = sphinx-build
commands =
    sphinx-build --color -b html {toxinidir}/docs/source {toxinidir}/docs/build/html
    python -c 'import pathlib; print(f"Documentation is available under:", pathlib.Path(f"{toxinidir}") / "docs" / "build" / "html" / "index.html")'

[testenv:news]
description = Create news fragment from a PR.
basepython = python3.9
skip_install = true
deps = requests
commands =
    python {toxinidir}/docs/source/create_news_fragment.py {posargs:}

[testenv:update-dev-notes]
description = Update development release notes.
basepython = python3.9
deps = towncrier
usedevelop = true
allowlist_externals =
    rm
    git
commands =
    rm -f {toxinidir}/docs/source/release/notes-dev.rst
    towncrier build --yes --version dev
    git reset -- {toxinidir}/docs/source/release/changelog/
    git checkout -- {toxinidir}/docs/source/release/changelog/

[testenv:build-release-notes]
description = Build release notes. Used when a new release happens.
basepython = python3.9
deps = towncrier
usedevelop = true
allowlist_externals = rm
commands =
    towncrier build --yes {posargs:}
    rm -f {toxinidir}/docs/source/release/notes-dev.rst
    towncrier build --yes --version dev
