name: CI

on:
    schedule:
    -   cron: 00 00 * * 1  # every Monday at 00:00
    push:
        branches: [master, dev]
        tags: [v*]
    pull_request:
        branches: [master, dev]

jobs:
    lint:
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v2
            with:
                fetch-depth: 0
        -   name: Set up Python 3.8
            uses: actions/setup-python@v2
            with:
                python-version: 3.8

        -   uses: actions/cache@v2
            with:
                path: ~/.cache/pre-commit
                key: precommit-${{ env.pythonLocation }}-${{ hashFiles('**/.pre-commit-config.yaml') }}

        -   name: Install dependencies
            run: |
                python -m pip install --upgrade pip
                pip install tox

        -   name: Lint
            run: |
                tox -e lint

    test:
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
                python: [3.7]  # , 3.9]
                use_slepc: [false]
                include:
                -   os: ubuntu-latest
                    python: 3.8
                    use_slepc: true
                -   os: macos-latest
                    python: 3.8
                    use_slepc: false

        steps:
        -   uses: actions/checkout@v2
            with:
                fetch-depth: 0
        -   name: Set up Python ${{ matrix.python }}
            uses: actions/setup-python@v2
            with:
                python-version: ${{ matrix.python }}

        -   name: Install dependencies
            env:
                USE_SLEPC: ${{ matrix.use_slepc }}
            run: |
                ./.scripts/ci/install_dependencies.sh

        -   name: Get pip cache dir
            id: pip-cache
            run: |
                echo "::set-output name=dir::$(pip cache dir)"
        -   name: Restore pip cache
            uses: actions/cache@v2
            with:
                path: ${{ steps.pip-cache.outputs.dir }}
                key: pip-${{ runner.os }}-${{ env.pythonLocation }}

        -   name: Install pip dependencies
            run: |
                python -m pip install --upgrade pip
                pip install tox tox-gh-actions codecov

        -   name: Restore tox cache
            uses: actions/cache@v2
            with:
                path: .tox
                key: tox-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('**/requirements.txt', '**/setup.py', '**/tox.ini') }}

        -   name: Test
            timeout-minutes: 60
            env:
                PLATFORM: ${{ matrix.os }}
                USE_SLEPC: ${{ matrix.use_slepc }}
            run: |
                tox -vv

        -   name: Upload coverage
            env:
                CODECOV_NAME: ${{ matrix.os }}-${{ matrix.python }}-{{ matrix.use_slepc }}
            run: |
                codecov --no-color --required --flags unittests

    regenerate:
        # TODO(michalk8): modify so that notebooks regenerate with the appropriate ref
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/head')
        needs: [lint, test]
        runs-on: ubuntu-latest
        steps:
        -   name: Rebuild tutorials
            uses: peter-evans/repository-dispatch@v1
            with:
                token: ${{ secrets.ACCESS_TOKEN }}
                repository: theislab/cellrank_notebooks
                event-type: rebuild
                client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'

    deploy:
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        needs: [lint, test]
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v2
            with:
                token: ${{ secrets.TOWNCRIER_TOKEN }}
                fetch-depth: 0
        -   name: Set up Python 3.8
            uses: actions/setup-python@v2
            with:
                python-version: 3.8

        -   name: Install dependencies
            run: |
                python -m pip install --upgrade pip
                pip install build towncrier rstcheck
                pip install -e'.'

        -   name: Generate release notes
            run: |
                towncrier build --yes
                rm -f docs/source/release/notes-dev.rst
                towncrier build --yes --version dev
                rstcheck -r docs/source/release
        -   name: Commit release notes
            uses: stefanzweifel/git-auto-commit-action@v4
            with:
                commit_message: '[auto][ci skip] Generate release notes'
                file_pattern: docs/source/release/**
                commit_user_name: CI
                skip_dirty_check: false

        -   name: Build a binary wheel and a source tarball
            run: |
                python -m build --sdist --wheel --outdir dist/

        -   name: Publish package on PyPI
            uses: pypa/gh-action-pypi-publish@master
            with:
                user: __token__
                password: ${{ secrets.PYPI_TOKEN }}
                skip_existing: true
                verbose: true
