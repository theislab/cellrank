name: CI

on:
    schedule:
    -   cron: 00 00 * * 1  # every Monday at 00:00
    push:
        branches: [master, dev]
        tags: [v*]
    pull_request:
        branches: [master, dev]

jobs:
    init:
        runs-on: ubuntu-latest
        outputs:
            skip: ${{ steps.ci-skip-step.outputs.ci-skip }}
        steps:
        -   uses: actions/checkout@v2
            with:
                fetch-depth: 0
        -   id: ci-skip-step
            uses: mstachniuk/ci-skip@master
            with:
                commit-filter: '[ci skip];[ci-skip];[skip ci];[skip-ci]'
                commit-filter-separator: ;

    linting:
        needs: init
        if: ${{ github.event_name == 'schedule' || needs.init.outputs.skip == 'false' }}
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v2
        -   name: Set up Python 3.8
            uses: actions/setup-python@v2
            with:
                python-version: 3.8
        -   name: Install dependencies
            run: |
                python -m pip install --upgrade pip
                pip install pre-commit
        -   name: Run static analysis
            run: |
                pre-commit run --all-files --show-diff-on-failure

    test:
        needs: linting
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            max-parallel: 4
            matrix:
                python: [3.7]  # , 3.9]
                os: [ubuntu-latest]
                use_slepc: [false]
                allow_failure: [false]
                include:
                -   os: ubuntu-latest
                    python: 3.8
                    use_slepc: true
                    allow_failure: false
                -   os: macos-latest
                    python: 3.8
                    use_slepc: false
                    allow_failure: true
        env:
            OS: ${{ matrix.os }}
            PYTHON: ${{ matrix.python }}
            USE_SLEPC: ${{ matrix.use_slepc }}

        steps:
        -   uses: actions/checkout@v2
        -   name: Set up Python ${{ matrix.python }}
            uses: actions/setup-python@v2
            with:
                python-version: ${{ matrix.python }}

        -   name: Get pip cache dir
            id: pip-cache
            run: |
                echo "::set-output name=dir::$(pip cache dir)"
        -   name: Cache pip
            uses: actions/cache@v2
            with:
                path: ${{ steps.pip-cache.outputs.dir }}
                key: pip-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/setup.py') }}
                restore-keys: |
                    pip-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('**/requirements.txt') }}
                    pip-${{ runner.os }}-${{ env.pythonLocation }}-

        -   name: Before install
            run: |
                ./.scripts/ci/before_install.sh
        -   name: Install
            run: |
                ./.scripts/ci/install.sh

        -   name: Testing
            timeout-minutes: 60
            continue-on-error: ${{ matrix.allow_failure }}
            run: |
                python -m pytest --cov --cov-report=term-missing --cov-config=./.coveragerc --cov-report=xml -vv

        -   name: Upload coverage
            env:
                CODECOV_NAME: ${{ matrix.os }}-${{ matrix.python }}-{{ matrix.use_slepc }}
            run: |
                codecov --no-color --required --flags unittests

    regenerate:
        # TODO: modify so that notebooks regen with the appropriate ref
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/head')
        needs: test
        runs-on: ubuntu-latest
        steps:
        -   name: Rebuild tutorials
            uses: peter-evans/repository-dispatch@v1
            with:
                token: ${{ secrets.ACCESS_TOKEN }}
                repository: theislab/cellrank_notebooks
                event-type: rebuild
                client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'

    deploy:
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        needs: test
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v2
            with:
                token: ${{ secrets.TOWNCRIER_TOKEN }}
        -   name: Set up Python 3.8
            uses: actions/setup-python@v2
            with:
                python-version: 3.8
        -   name: Install pypa/build
            run: |
                python -m pip install --upgrade pip
                pip install build towncrier rstcheck

        -   name: Generate release notes
            run: |
                towncrier build --yes
                rstcheck docs/source/release -r
        -   name: Commit release notes
            id: auto-commit-action
            uses: stefanzweifel/git-auto-commit-action@v4
            with:
                commit_message: '[auto] Generate release notes'
                file_pattern: docs/source/release/**
                commit_user_name: CI
                skip_dirty_check: false

        -   name: Build a binary wheel and a source tarball
            run: |
                python -m build --sdist --wheel --outdir dist/

        -   name: Publish package on PyPI
            uses: pypa/gh-action-pypi-publish@master
            with:
                user: __token__
                password: ${{ secrets.PYPI_TOKEN }}
                skip_existing: true
                verbose: true
